import re

def get_input(input_file: str='Inputs/Day25_Inputs.txt') -> tuple:
    """
    Parses an input file to extract a pair of coordinates.

    Parameters
    ----------
    input_file : str, optional
        Input file containing the coordinates.
        The default is 'Inputs/Day25_Inputs.txt'.

    Returns
    -------
    pos : tuple(int)
        Coordinates in the form (x, y).

    """

    # Parse input file
    with open(input_file) as f:
        pos = tuple(int(i) for i in re.findall('\d+', f.readlines()[0]))

    return pos

def nth_code(n: int) -> int:
    """
    Finds the nth value in the geometric series such that

    .. math:: a_{1} = 20151125

    and

    .. math:: a_{n+1} = 252533a_{n}\mod{33554393},

    which is equivalent to

    .. math:: a_{n} = (20151125 × 252533^{n-1})\mod{33554393}.

    Parameters
    ----------
    n : int
        The numbered value in the sequence to find.

    Returns
    -------
    code : int
        The nth value in the sequence.

    """
    # Use Python's built in pow function which includes modulus, to speed up calculation for
    # large powers
    code = (20151125*pow(252533, n-1, 33554393))%33554393
    return code

def nth_triangular(n: int) -> int:
    """
    Calculates the nth triangular number, or the sum of all positive integers from 1 to n, i.e.

    .. math:: \sum_{i=1}^{n}

    Parameters
    ----------
    n : int
        Numbered triangular number to calculate.

    Returns
    -------
    num : int
        Corresponding triangular number.

    """
    # Calculate sum of all integers from 1 to n
    num = sum(range(n+1))
    return num

def get_grid_num(row: int, col: int) -> int:
    """
    Finds the number in a grid corresponding to a given row and column, where the grid is formed
    starting with 1 in the first row and column and then filling the rest of the grid in diagonals
    up and to the right. So the first few rows and columns of the grid look like this:

    .. list-table::
       :widths: 10 10 10 10 10 10 10
       :header-rows: 1
       :stub-columns: 1
    
       * - 
         - 1
         - 2
         - 3
         - 4
         - 5
         - 6
       * - 1
         - 1
         - 3
         - 6
         - 10
         - 15
         - 21
       * - 2
         - 2
         - 5
         - 9
         - 14
         - 20
         - 27
       * - 3
         - 4
         - 8
         - 13
         - 19
         - 26
         - 34
       * - 4
         - 7
         - 12
         - 18
         - 25
         - 33
         - 42
       * - 5
         - 11
         - 17
         - 24
         - 32
         - 41
         - 51
       * - 6
         - 16
         - 23
         - 31
         - 40
         - 50
         - 61

    Parameters
    ----------
    row : int
        The row nunmber.
    col : int
        The column number.

    Returns
    -------
    grid_num : int
        The number in the grid corresponding to the given row and column.

    """
    # Based on manual analysis of patterns from row to row and col to col:
    # grid_num = nth_triangular(col) + (nth_triangular(col+row-2) - nth_triangular(col-1)),
    # which simplifies to:
    grid_num = col + nth_triangular(col+row-2)
    return grid_num

def Day25_Part1(input_file: str='Inputs/Day25_Inputs.txt') -> int:
    """
    Finds the code in a grid corresponding to given row and column numbers, where the grid is
    generated by starting with first value in a geometric sequence in the first row and column
    and then filling the rest of the grid with the proceeding values in the series, in diagonals
    up and to the right. The geometric sequence begins with

    .. math:: a_{1} = 20151125

    and evolves as

    .. math:: a_{n+1} = 252533a_{n}\mod{33554393},

    which is equivalent to

    .. math:: a_{n} = (20151125 × 252533^{n-1})\mod{33554393}.

    So the first few rows and columns of the grid look like this:

    .. list-table::
       :widths: 10 10 10 10 10 10 10
       :header-rows: 1
       :stub-columns: 1
    
       * - 
         - 1
         - 2
         - 3
         - 4
         - 5
         - 6
       * - 1
         - 20151125
         - 18749137
         - 17289845
         - 30943339
         - 10071777
         - 33511524
       * - 2
         - 31916031
         - 21629792
         - 16929656
         - 7726640
         - 15514188
         - 4041754
       * - 3
         - 16080970
         - 8057251
         - 1601130
         - 7981243
         - 11661866
         - 16474243
       * - 4
         - 24592653
         - 32451966
         - 21345942
         - 9380097
         - 10600672
         - 31527494
       * - 5
         - 77061
         - 17552253
         - 28094349
         - 6899651
         - 9250759
         - 31663883
       * - 6
         - 33071741
         - 6796745
         - 25397450
         - 24659492
         - 1534922
         - 27995004

    Parameters
    ----------
    input_file : str, optional
        Input file containing the row and column.
        The default is 'Inputs/Day25_Inputs.txt'.

    Returns
    -------
    int
        DESCRIPTION.

    """

    # Parse input file to extract the coordinates
    pos = get_input(input_file)

    # Find the corresponding numbered point in the grid, where the top left corner is 1, etc.
    num_in_grid = get_grid_num(*pos)
    # Find the corresponding value in the geometric sequence; this is the code
    code = nth_code(num_in_grid)

    return code
